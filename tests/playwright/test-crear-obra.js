// @ts-check
const { test, expect } = require('@playwright/test');

test.describe('Crear Obra - Pruebas Automatizadas', () => {
    let page;
    let context;

    test.beforeAll(async ({ browser }) => {
        context = await browser.newContext();
        page = await context.newPage();

        // Configurar console logs para debugging
        page.on('console', msg => console.log('PAGE LOG:', msg.text()));
        page.on('pageerror', error => console.log('PAGE ERROR:', error.message));
    });

    test.afterAll(async () => {
        await context.close();
    });

    test('Deber√≠a crear una obra exitosamente y verificar relaciones', async () => {
        console.log('üöÄ Iniciando prueba de creaci√≥n de obra...');

        // 1. Navegar a la p√°gina de login (asumiendo autenticaci√≥n)
        await page.goto('/login');
        await page.waitForLoadState('networkidle');

        // 2. Hacer login (ajusta estas credenciales seg√∫n tu seeder)
        await page.fill('input[name="email"]', 'admin@petrotekno.com');
        await page.fill('input[name="password"]', 'password');
        await page.click('button[type="submit"]');
        await page.waitForLoadState('networkidle');

        console.log('‚úÖ Login completado');

        // 3. Navegar a la p√°gina de crear obra
        await page.goto('/obras/create');
        await page.waitForLoadState('networkidle');

        console.log('‚úÖ Navegado a formulario de crear obra');

        // 4. Verificar que estamos en la p√°gina correcta
        await expect(page).toHaveURL(/.*\/obras\/create/);
        await expect(page.locator('h2')).toContainText('Crear Nueva Obra');

        // 5. Llenar el formulario de obra
        const nombreObra = `Obra Automatizada ${Date.now()}`;

        await page.fill('input[name="nombre_obra"]', nombreObra);
        await page.selectOption('select[name="estatus"]', 'planificada');
        await page.fill('input[name="avance"]', '0');

        // Fechas
        const fechaInicio = new Date();
        const fechaFin = new Date(Date.now() + 365 * 24 * 60 * 60 * 1000); // +1 a√±o

        await page.fill('input[name="fecha_inicio"]', fechaInicio.toISOString().split('T')[0]);
        await page.fill('input[name="fecha_fin"]', fechaFin.toISOString().split('T')[0]);

        // 6. Seleccionar un responsable de obra (encargado)
        console.log('üîç Seleccionando responsable de obra...');

        const encargadoSelect = page.locator('select[name="encargado_id"]');
        await expect(encargadoSelect).toBeVisible();

        // Obtener las opciones disponibles
        const encargadoOptions = await encargadoSelect.locator('option').all();
        if (encargadoOptions.length > 1) { // M√°s de 1 porque el primero es "Seleccione..."
            const primeraOpcion = await encargadoOptions[1].getAttribute('value');
            await encargadoSelect.selectOption(primeraOpcion);
            console.log(`‚úÖ Responsable seleccionado: ${primeraOpcion}`);
        } else {
            throw new Error('‚ùå No hay responsables disponibles para seleccionar');
        }

        // 7. Agregar observaciones
        await page.fill('textarea[name="observaciones"]', 'Obra creada mediante prueba automatizada con Playwright');

        // 8. Intentar asignar un veh√≠culo si hay disponibles
        console.log('üöó Verificando disponibilidad de veh√≠culos...');

        const botonAsignarVehiculo = page.locator('button:has-text("Asignar Veh√≠culo")');
        const hayVehiculos = await botonAsignarVehiculo.isVisible();

        let vehiculoAsignado = false;

        if (hayVehiculos) {
            console.log('‚úÖ Veh√≠culos disponibles, intentando asignar...');

            try {
                // Abrir modal de veh√≠culos
                await botonAsignarVehiculo.click();
                await page.waitForSelector('#vehicle-modal', { state: 'visible' });

                // Buscar veh√≠culo disponible
                const vehiculosDisponibles = page.locator('.vehicle-option:not(.cursor-not-allowed)');
                const countDisponibles = await vehiculosDisponibles.count();

                if (countDisponibles > 0) {
                    // Seleccionar el primer veh√≠culo disponible
                    await vehiculosDisponibles.first().click();

                    // Confirmar asignaci√≥n
                    const confirmarBtn = page.locator('#confirm-vehicle-btn');
                    await expect(confirmarBtn).toBeEnabled();
                    await confirmarBtn.click();

                    vehiculoAsignado = true;
                    console.log('‚úÖ Veh√≠culo asignado exitosamente');
                } else {
                    console.log('‚ö†Ô∏è No hay veh√≠culos disponibles para asignar');
                    // Cerrar modal
                    await page.locator('button:has-text("Cancelar")').click();
                }
            } catch (error) {
                console.log('‚ö†Ô∏è Error al asignar veh√≠culo:', error.message);
                // Intentar cerrar modal si est√° abierto
                const modal = page.locator('#vehicle-modal');
                if (await modal.isVisible()) {
                    await page.keyboard.press('Escape');
                }
            }
        } else {
            console.log('‚ö†Ô∏è No hay veh√≠culos disponibles en el sistema');
        }

        // 9. Enviar el formulario
        console.log('üìù Enviando formulario...');

        await page.click('button[type="submit"]:has-text("Crear Obra")');
        await page.waitForLoadState('networkidle');

        // 10. Verificar que la obra se cre√≥ exitosamente
        console.log('üîç Verificando creaci√≥n exitosa...');

        // Verificar redirecci√≥n o mensaje de √©xito
        const urlActual = page.url();
        const tieneMensajeExito = await page.locator('.bg-green-100, .alert-success').count() > 0;
        const estaEnIndex = urlActual.includes('/obras') && !urlActual.includes('/create');

        if (tieneMensajeExito || estaEnIndex) {
            console.log('‚úÖ Obra creada exitosamente');

            // 11. Obtener el ID de la obra creada
            let obraId = null;

            if (urlActual.includes('/obras/') && !urlActual.includes('/create')) {
                const match = urlActual.match(/\/obras\/(\d+)/);
                if (match) {
                    obraId = match[1];
                }
            }

            // Si no tenemos ID de la URL, buscar en la base de datos
            if (!obraId) {
                console.log('üîç Buscando obra en la base de datos...');
                // Aqu√≠ ejecutar√≠amos una consulta a la base de datos para encontrar la obra
                // Por ahora, usaremos el nombre √∫nico para identificarla
            }

            // 12. Verificar relaciones en la base de datos
            await verificarRelacionesBaseDatos(page, nombreObra, vehiculoAsignado);

        } else {
            // Revisar errores
            console.log('‚ùå Error al crear la obra');
            await capturarErrores(page);
            throw new Error('La obra no se cre√≥ exitosamente');
        }
    });

    /**
     * Funci√≥n para verificar las relaciones en la base de datos
     */
    async function verificarRelacionesBaseDatos(page, nombreObra, vehiculoAsignado) {
        console.log('üîç Verificando relaciones en la base de datos...');

        try {
            // Crear una funci√≥n auxiliar en el navegador para hacer peticiones
            const resultado = await page.evaluate(async (nombreObra) => {
                try {
                    // Hacer una petici√≥n para obtener informaci√≥n de la obra
                    const response = await fetch('/api/verificar-obra', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json',
                            'X-CSRF-TOKEN': document.querySelector('meta[name="csrf-token"]')?.getAttribute('content') || '',
                        },
                        body: JSON.stringify({ nombre_obra: nombreObra })
                    });

                    if (response.ok) {
                        return await response.json();
                    } else {
                        return { error: 'No se pudo verificar la obra' };
                    }
                } catch (error) {
                    return { error: error.message };
                }
            }, nombreObra);

            if (resultado.error) {
                console.log('‚ö†Ô∏è No se pudo verificar autom√°ticamente via API:', resultado.error);
                console.log('‚ÑπÔ∏è Realizando verificaci√≥n manual...');
                await verificacionManual(page, nombreObra);
            } else {
                console.log('‚úÖ Verificaci√≥n autom√°tica completada:', resultado);

                // Verificar encargado_id
                if (resultado.obra && resultado.obra.encargado_id) {
                    console.log(`‚úÖ Encargado ID guardado correctamente: ${resultado.obra.encargado_id}`);
                } else {
                    console.log('‚ùå Encargado ID no se guard√≥ correctamente');
                }

                // Verificar asignaciones de veh√≠culo
                if (vehiculoAsignado && resultado.asignaciones && resultado.asignaciones.length > 0) {
                    console.log(`‚úÖ Relaci√≥n veh√≠culo-obra creada en asignaciones_obra: ${resultado.asignaciones.length} asignaci√≥n(es)`);
                } else if (vehiculoAsignado) {
                    console.log('‚ùå No se encontr√≥ la relaci√≥n veh√≠culo-obra en asignaciones_obra');
                } else {
                    console.log('‚ÑπÔ∏è No se asign√≥ veh√≠culo, verificaci√≥n de asignaciones omitida');
                }
            }

        } catch (error) {
            console.log('‚ö†Ô∏è Error en verificaci√≥n de base de datos:', error.message);
            await verificacionManual(page, nombreObra);
        }
    }

    /**
     * Funci√≥n para verificaci√≥n manual navegando a las p√°ginas
     */
    async function verificacionManual(page, nombreObra) {
        console.log('üîç Realizando verificaci√≥n manual...');

        try {
            // Ir al listado de obras
            await page.goto('/obras');
            await page.waitForLoadState('networkidle');

            // Buscar la obra creada
            const obraEncontrada = page.locator(`text=${nombreObra}`);
            if (await obraEncontrada.count() > 0) {
                console.log('‚úÖ Obra encontrada en el listado');

                // Hacer clic en la obra para ver detalles
                await obraEncontrada.first().click();
                await page.waitForLoadState('networkidle');

                // Verificar que estamos en la p√°gina de detalles
                const paginaDetalles = page.url().includes('/obras/') && !page.url().includes('/index');
                if (paginaDetalles) {
                    console.log('‚úÖ Navegado a p√°gina de detalles de la obra');

                    // Buscar informaci√≥n del encargado
                    const infoEncargado = page.locator('[data-testid="encargado-info"], .encargado, :has-text("Encargado"):has-text("Responsable")');
                    if (await infoEncargado.count() > 0) {
                        console.log('‚úÖ Informaci√≥n del encargado visible en la p√°gina');
                    } else {
                        console.log('‚ö†Ô∏è No se encontr√≥ informaci√≥n del encargado en la p√°gina');
                    }

                    // Buscar informaci√≥n de veh√≠culos asignados
                    const infoVehiculos = page.locator('[data-testid="vehiculos-asignados"], .vehiculos-asignados, :has-text("Veh√≠culo"):has-text("Asignado")');
                    if (await infoVehiculos.count() > 0) {
                        console.log('‚úÖ Informaci√≥n de veh√≠culos asignados visible');
                    } else {
                        console.log('‚ÑπÔ∏è No se encontr√≥ informaci√≥n de veh√≠culos asignados (puede ser normal si no se asignaron)');
                    }
                }
            } else {
                console.log('‚ùå Obra no encontrada en el listado');
            }

        } catch (error) {
            console.log('‚ö†Ô∏è Error en verificaci√≥n manual:', error.message);
        }
    }

    /**
     * Funci√≥n para capturar errores del formulario
     */
    async function capturarErrores(page) {
        console.log('üîç Analizando errores...');

        // Buscar mensajes de error
        const errores = await page.locator('.text-red-600, .text-red-500, .invalid-feedback, .alert-danger').allTextContents();
        if (errores.length > 0) {
            console.log('‚ùå Errores encontrados:');
            errores.forEach((error, index) => {
                console.log(`   ${index + 1}. ${error.trim()}`);
            });
        }

        // Verificar validaci√≥n de campos
        const camposInvalidos = await page.locator('input.border-red-500, select.border-red-500, textarea.border-red-500').count();
        if (camposInvalidos > 0) {
            console.log(`‚ùå ${camposInvalidos} campo(s) con errores de validaci√≥n`);
        }

        // Capturar screenshot para debugging
        await page.screenshot({ path: `debug-error-${Date.now()}.png`, fullPage: true });
        console.log('üì∏ Screenshot de error guardado');
    }
});

test.describe('Pruebas de Validaci√≥n de Formulario', () => {
    test('Deber√≠a mostrar errores de validaci√≥n para campos requeridos', async ({ page }) => {
        console.log('üß™ Probando validaci√≥n de campos requeridos...');

        // Login
        await page.goto('/login');
        await page.fill('input[name="email"]', 'admin@petrotekno.com');
        await page.fill('input[name="password"]', 'password');
        await page.click('button[type="submit"]');
        await page.waitForLoadState('networkidle');

        // Ir al formulario
        await page.goto('/obras/create');
        await page.waitForLoadState('networkidle');

        // Intentar enviar formulario vac√≠o
        await page.click('button[type="submit"]:has-text("Crear Obra")');
        await page.waitForTimeout(1000);

        // Verificar que aparecen errores de validaci√≥n
        const errores = await page.locator('.text-red-600, .invalid-feedback').count();
        expect(errores).toBeGreaterThan(0);

        console.log(`‚úÖ ${errores} error(es) de validaci√≥n mostrados correctamente`);
    });
});