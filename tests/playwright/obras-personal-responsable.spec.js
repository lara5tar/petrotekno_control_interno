import { test, expect } from '@playwright/test';

test.describe('Crear Obra - Personal Responsable de Obra', () => {
    test.beforeEach(async ({ page }) => {
        // Navegar a la p√°gina de login
        await page.goto('/login');

        // Hacer login con credenciales de administrador
        await page.fill('input[name="email"]', 'admin@petrotekno.com');
        await page.fill('input[name="password"]', 'password');
        await page.click('button[type="submit"]');

        // Esperar redirecci√≥n al home
        await page.waitForURL('/home');
    });

    test('debe mostrar solo personal con categor√≠a "Responsable de obra" en el selector de encargados', async ({ page }) => {
        // Navegar a la p√°gina de crear obra
        await page.goto('/obras/create');

        // Verificar que estamos en la p√°gina correcta
        await expect(page.locator('h2')).toContainText('Crear Nueva Obra');

        // Verificar que existe el selector de responsable
        const encargadoSelector = page.locator('select[name="encargado_id"]');
        await expect(encargadoSelector).toBeVisible();

        // Verificar el label del selector
        await expect(page.locator('label[for="encargado_id"]')).toContainText('Responsable de la obra');

        // Verificar la descripci√≥n que menciona la categor√≠a espec√≠fica
        await expect(page.locator('text=Personal con categor√≠a "Responsable de obra"')).toBeVisible();

        // Obtener todas las opciones del selector (excluyendo la opci√≥n vac√≠a)
        const encargadoOptions = page.locator('select[name="encargado_id"] option:not([value=""])');
        const optionCount = await encargadoOptions.count();

        console.log(`üìã Se encontraron ${optionCount} opciones de personal responsable`);

        if (optionCount > 0) {
            // Verificar que cada opci√≥n tiene los atributos correctos
            for (let i = 0; i < optionCount; i++) {
                const option = encargadoOptions.nth(i);

                // Verificar que tiene un ID v√°lido
                const value = await option.getAttribute('value');
                expect(value).toMatch(/^\d+$/); // Debe ser un n√∫mero

                // Verificar que tiene el atributo data-categoria
                const categoria = await option.getAttribute('data-categoria');
                expect(categoria).toBeTruthy();

                // Verificar que el texto incluye el nombre y la categor√≠a
                const text = await option.textContent();
                expect(text).toBeTruthy();

                console.log(`‚úÖ Opci√≥n ${i + 1}: ID=${value}, Categor√≠a="${categoria}", Texto="${text}"`);

                // Verificar que la categor√≠a es "Responsable de obra"
                if (categoria && categoria !== 'Sin categor√≠a') {
                    expect(categoria).toContain('Responsable de obra');
                }
            }

            console.log('‚úÖ Todas las opciones tienen la categor√≠a correcta');

        } else {
            console.log('‚ö†Ô∏è No se encontr√≥ personal con categor√≠a "Responsable de obra"');

            // Verificar que aparece la opci√≥n por defecto
            await expect(page.locator('select[name="encargado_id"] option[value=""]')).toHaveText('Seleccione un responsable');
        }
    });

    test('debe filtrar correctamente el personal por categor√≠a "Responsable de obra"', async ({ page }) => {
        // Navegar a la p√°gina de crear obra
        await page.goto('/obras/create');

        const encargadoSelector = page.locator('select[name="encargado_id"]');
        const encargadoOptions = page.locator('select[name="encargado_id"] option:not([value=""])');
        const optionCount = await encargadoOptions.count();

        if (optionCount > 0) {
            console.log(`üìä Analizando ${optionCount} opciones de personal...`);

            // Verificar que TODAS las opciones tienen la categor√≠a correcta
            let correctCategoryCount = 0;
            let incorrectCategoryCount = 0;

            for (let i = 0; i < optionCount; i++) {
                const option = encargadoOptions.nth(i);
                const categoria = await option.getAttribute('data-categoria');
                const text = await option.textContent();

                if (categoria && categoria.includes('Responsable de obra')) {
                    correctCategoryCount++;
                    console.log(`‚úÖ Personal v√°lido: ${text} - ${categoria}`);
                } else {
                    incorrectCategoryCount++;
                    console.log(`‚ùå Personal inv√°lido: ${text} - ${categoria || 'Sin categor√≠a'}`);
                }
            }

            console.log(`üìà Resumen del filtrado:`);
            console.log(`   ‚úÖ Personal con categor√≠a correcta: ${correctCategoryCount}`);
            console.log(`   ‚ùå Personal con categor√≠a incorrecta: ${incorrectCategoryCount}`);

            // EXPECTATIVA: Todos deben tener la categor√≠a correcta
            expect(incorrectCategoryCount).toBe(0);
            expect(correctCategoryCount).toBe(optionCount);

            console.log('‚úÖ El filtro por categor√≠a "Responsable de obra" funciona correctamente');

        } else {
            console.log('‚ö†Ô∏è No hay personal disponible para verificar el filtrado');
        }
    });

    test('debe poder seleccionar personal responsable y crear obra exitosamente', async ({ page }) => {
        await page.goto('/obras/create');

        // Llenar campos obligatorios b√°sicos
        await page.fill('input[name="nombre_obra"]', 'Test Obra - Personal Responsable');
        await page.selectOption('select[name="estatus"]', 'planificada');
        await page.fill('input[name="fecha_inicio"]', '2024-12-20');

        // Verificar y seleccionar encargado
        const encargadoSelector = page.locator('select[name="encargado_id"]');
        const encargadoOptions = await encargadoSelector.locator('option:not([value=""])').count();

        if (encargadoOptions > 0) {
            // Obtener informaci√≥n del primer encargado disponible
            const firstOption = encargadoSelector.locator('option:not([value=""])').first();
            const optionValue = await firstOption.getAttribute('value');
            const optionText = await firstOption.textContent();
            const optionCategoria = await firstOption.getAttribute('data-categoria');

            console.log(`üë§ Seleccionando encargado:`);
            console.log(`   ID: ${optionValue}`);
            console.log(`   Nombre: ${optionText}`);
            console.log(`   Categor√≠a: ${optionCategoria}`);

            // Seleccionar el encargado
            await encargadoSelector.selectOption(optionValue);

            // Verificar que se seleccion√≥ correctamente
            const selectedValue = await encargadoSelector.inputValue();
            expect(selectedValue).toBe(optionValue);

            // Agregar observaciones para identificar la prueba
            await page.fill('textarea[name="observaciones"]', 'Obra de prueba con personal responsable - Playwright Test');

            // Enviar formulario
            await page.click('button[type="submit"]');

            // Verificar redirecci√≥n exitosa
            await page.waitForURL('/obras', { timeout: 10000 });

            // Verificar mensaje de √©xito
            const successMessage = page.locator('.bg-green-100');
            await expect(successMessage).toBeVisible();
            await expect(successMessage).toContainText('exitosamente');

            console.log('‚úÖ Obra creada exitosamente con personal responsable asignado');

        } else {
            console.log('‚ö†Ô∏è No hay personal responsable disponible para crear la obra');

            // Intentar enviar el formulario sin encargado para verificar validaci√≥n
            await page.click('button[type="submit"]');

            // Verificar que se muestra error de validaci√≥n
            await expect(page.locator('.text-red-600')).toBeVisible();
            console.log('‚úÖ Validaci√≥n de campo obligatorio funciona correctamente');
        }
    });

    test('debe mostrar informaci√≥n detallada del personal en las opciones', async ({ page }) => {
        await page.goto('/obras/create');

        const encargadoOptions = page.locator('select[name="encargado_id"] option:not([value=""])');
        const optionCount = await encargadoOptions.count();

        if (optionCount > 0) {
            console.log(`üîç Verificando informaci√≥n detallada de ${optionCount} opciones...`);

            for (let i = 0; i < Math.min(optionCount, 3); i++) { // Verificar m√°ximo 3 para eficiencia
                const option = encargadoOptions.nth(i);
                const text = await option.textContent();
                const categoria = await option.getAttribute('data-categoria');

                // Verificar que el texto incluye nombre completo
                expect(text).toBeTruthy();
                expect(text.length).toBeGreaterThan(3); // Debe tener un nombre real

                // Verificar que incluye la categor√≠a en el texto
                if (categoria && categoria !== 'Sin categor√≠a') {
                    expect(text).toContain(categoria);
                }

                console.log(`üìù Opci√≥n ${i + 1}: "${text}"`);
                console.log(`   üìÇ Categor√≠a: ${categoria}`);

                // Verificar estructura esperada: "Nombre - Categor√≠a"
                if (text.includes(' - ')) {
                    const parts = text.split(' - ');
                    expect(parts.length).toBe(2);

                    const nombre = parts[0].trim();
                    const categoriaTexto = parts[1].trim();

                    expect(nombre.length).toBeGreaterThan(0);
                    expect(categoriaTexto.length).toBeGreaterThan(0);

                    console.log(`   üë§ Nombre: "${nombre}"`);
                    console.log(`   üè∑Ô∏è Categor√≠a mostrada: "${categoriaTexto}"`);
                }
            }

            console.log('‚úÖ Informaci√≥n detallada del personal se muestra correctamente');

        } else {
            console.log('‚ö†Ô∏è No hay opciones de personal para verificar informaci√≥n detallada');
        }
    });

    test('debe validar que el campo encargado es obligatorio', async ({ page }) => {
        await page.goto('/obras/create');

        // Llenar otros campos obligatorios pero dejar encargado vac√≠o
        await page.fill('input[name="nombre_obra"]', 'Test Obra Sin Encargado');
        await page.selectOption('select[name="estatus"]', 'planificada');
        await page.fill('input[name="fecha_inicio"]', '2024-12-20');

        // Verificar que el campo est√° marcado como requerido
        const encargadoSelector = page.locator('select[name="encargado_id"]');
        await expect(encargadoSelector).toHaveAttribute('required');

        // Verificar que hay un asterisco rojo indicando campo obligatorio
        await expect(page.locator('label[for="encargado_id"] .text-red-500')).toHaveText('*');

        // Intentar enviar formulario sin seleccionar encargado
        await page.click('button[type="submit"]');

        // Verificar que no se redirige (se queda en la misma p√°gina)
        await expect(page.url()).toContain('/obras/create');

        console.log('‚úÖ Validaci√≥n de campo obligatorio para encargado funciona correctamente');
    });

    test('debe manejar el caso cuando no hay personal con categor√≠a "Responsable de obra"', async ({ page }) => {
        await page.goto('/obras/create');

        const encargadoSelector = page.locator('select[name="encargado_id"]');
        const encargadoOptions = page.locator('select[name="encargado_id"] option:not([value=""])');
        const optionCount = await encargadoOptions.count();

        // Verificar que siempre existe la opci√≥n por defecto
        await expect(page.locator('select[name="encargado_id"] option[value=""]')).toBeVisible();
        await expect(page.locator('select[name="encargado_id"] option[value=""]')).toHaveText('Seleccione un responsable');

        if (optionCount === 0) {
            console.log('‚ö†Ô∏è No hay personal con categor√≠a "Responsable de obra" registrado');
            console.log('üìù Recomendaci√≥n: Agregar personal con esta categor√≠a para poder crear obras');

            // Llenar formulario y verificar que falla por falta de encargado
            await page.fill('input[name="nombre_obra"]', 'Test Obra Sin Personal Responsable');
            await page.selectOption('select[name="estatus"]', 'planificada');
            await page.fill('input[name="fecha_inicio"]', '2024-12-20');

            // Intentar enviar
            await page.click('button[type="submit"]');

            // Verificar que no se puede crear obra sin encargado
            await expect(page.url()).toContain('/obras/create');

            console.log('‚úÖ Sistema previene correctamente la creaci√≥n de obra sin personal responsable');

        } else {
            console.log(`‚úÖ Sistema tiene ${optionCount} personal(es) con categor√≠a "Responsable de obra" disponible(s)`);
        }
    });
});