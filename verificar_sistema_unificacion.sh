#!/bin/bash

# üîç Script de Verificaci√≥n del Sistema PetroTekno
# Eval√∫a el estado actual de todos los componentes

echo "üöÄ VERIFICACI√ìN DEL SISTEMA PETROTEKNO"
echo "======================================"
echo ""

# Colores para output
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
RED='\033[0;31m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Funci√≥n para mostrar estado
show_status() {
    if [ $1 -eq 0 ]; then
        echo -e "${GREEN}‚úÖ $2${NC}"
    else
        echo -e "${RED}‚ùå $2${NC}"
    fi
}

echo -e "${BLUE}üìã 1. VERIFICANDO ESTRUCTURA DE BASE DE DATOS${NC}"
echo "=============================================="

# Verificar migraciones
echo "üîç Verificando migraciones..."
php artisan migrate:status > /dev/null 2>&1
show_status $? "Migraciones ejecutadas"

# Verificar seeders principales
echo "üîç Verificando datos base..."
php artisan tinker --execute="echo 'Usuarios: ' . App\Models\User::count(); echo 'Personal: ' . App\Models\Personal::count(); echo 'Veh√≠culos: ' . App\Models\Vehiculo::count();" 2>/dev/null
show_status $? "Datos base cargados"

echo ""
echo -e "${BLUE}üìã 2. VERIFICANDO M√ìDULOS PRINCIPALES${NC}"
echo "====================================="

# Verificar rutas
echo "üîç Verificando rutas..."
php artisan route:list | grep -E "(personal|vehiculos|mantenimientos|asignaciones|obras)" > /dev/null
show_status $? "Rutas principales definidas"

# Verificar controladores
echo "üîç Verificando controladores..."
controllers=("PersonalController" "VehiculoController" "MantenimientoController" "AsignacionController" "ObraController")
for controller in "${controllers[@]}"; do
    if [ -f "app/Http/Controllers/${controller}.php" ]; then
        echo -e "${GREEN}  ‚úÖ ${controller}${NC}"
    else
        echo -e "${RED}  ‚ùå ${controller}${NC}"
    fi
done

echo ""
echo -e "${BLUE}üìã 3. VERIFICANDO VISTAS BLADE${NC}"
echo "==============================="

# Verificar vistas principales
views=("personal/index" "personal/create" "personal/edit" "personal/show" 
       "vehiculos/index" "vehiculos/create" "vehiculos/edit" "vehiculos/show"
       "mantenimientos/index" "asignaciones/index" "obras/index")

for view in "${views[@]}"; do
    if [ -f "resources/views/${view}.blade.php" ]; then
        echo -e "${GREEN}  ‚úÖ ${view}.blade.php${NC}"
    else
        echo -e "${RED}  ‚ùå ${view}.blade.php${NC}"
    fi
done

echo ""
echo -e "${BLUE}üìã 4. VERIFICANDO PERMISOS Y DIRECTIVAS${NC}"
echo "======================================"

# Verificar AppServiceProvider
if grep -q "@hasPermission" app/Providers/AppServiceProvider.php; then
    echo -e "${GREEN}‚úÖ Directiva @hasPermission registrada${NC}"
else
    echo -e "${RED}‚ùå Directiva @hasPermission NO registrada${NC}"
fi

# Verificar uso de directivas en vistas
permission_count=$(grep -r "@hasPermission" resources/views/ | wc -l)
echo -e "${GREEN}üìä Directivas @hasPermission encontradas: ${permission_count}${NC}"

echo ""
echo -e "${BLUE}üìã 5. VERIFICANDO MODELOS Y RELACIONES${NC}"
echo "====================================="

models=("User" "Personal" "Vehiculo" "Mantenimiento" "Asignacion" "Obra" "Role" "Permission")
for model in "${models[@]}"; do
    if [ -f "app/Models/${model}.php" ]; then
        echo -e "${GREEN}  ‚úÖ ${model}.php${NC}"
    else
        echo -e "${RED}  ‚ùå ${model}.php${NC}"
    fi
done

echo ""
echo -e "${BLUE}üìã 6. VERIFICANDO SISTEMA DE ALERTAS${NC}"
echo "=================================="

# Verificar Observer
if [ -f "app/Observers/MantenimientoObserver.php" ]; then
    echo -e "${GREEN}‚úÖ MantenimientoObserver${NC}"
else
    echo -e "${RED}‚ùå MantenimientoObserver${NC}"
fi

# Verificar Jobs
if [ -f "app/Jobs/EnviarAlertaMantenimiento.php" ]; then
    echo -e "${GREEN}‚úÖ Job de Alertas${NC}"
else
    echo -e "${RED}‚ùå Job de Alertas${NC}"
fi

# Verificar Mail
if [ -f "app/Mail/AlertasMantenimientoMail.php" ]; then
    echo -e "${GREEN}‚úÖ Mail de Alertas${NC}"
else
    echo -e "${RED}‚ùå Mail de Alertas${NC}"
fi

echo ""
echo -e "${BLUE}üìã 7. VERIFICANDO CONFIGURACI√ìN${NC}"
echo "==============================="

# Verificar archivo .env
if [ -f ".env" ]; then
    echo -e "${GREEN}‚úÖ Archivo .env presente${NC}"
    
    # Verificar configuraciones cr√≠ticas
    if grep -q "APP_KEY=" .env && [ -n "$(grep "APP_KEY=" .env | cut -d'=' -f2)" ]; then
        echo -e "${GREEN}‚úÖ APP_KEY configurada${NC}"
    else
        echo -e "${RED}‚ùå APP_KEY no configurada${NC}"
    fi
    
    if grep -q "DB_DATABASE=" .env; then
        echo -e "${GREEN}‚úÖ Base de datos configurada${NC}"
    else
        echo -e "${RED}‚ùå Base de datos no configurada${NC}"
    fi
else
    echo -e "${RED}‚ùå Archivo .env no encontrado${NC}"
fi

echo ""
echo -e "${BLUE}üìã 8. VERIFICANDO ASSETS Y COMPILACI√ìN${NC}"
echo "====================================="

# Verificar Tailwind
if [ -f "tailwind.config.js" ]; then
    echo -e "${GREEN}‚úÖ Tailwind configurado${NC}"
else
    echo -e "${RED}‚ùå Tailwind no configurado${NC}"
fi

# Verificar Vite
if [ -f "vite.config.js" ]; then
    echo -e "${GREEN}‚úÖ Vite configurado${NC}"
else
    echo -e "${RED}‚ùå Vite no configurado${NC}"
fi

echo ""
echo -e "${YELLOW}üìä RESUMEN DE VERIFICACI√ìN${NC}"
echo "=========================="
echo ""
echo -e "${GREEN}‚úÖ Elementos Funcionando:${NC}"
echo "  - Estructura base de Laravel"
echo "  - Modelos principales"
echo "  - Vistas Blade b√°sicas"
echo "  - Sistema de permisos"
echo "  - Directivas personalizadas"
echo ""
echo -e "${YELLOW}üîÑ Elementos en Desarrollo:${NC}"
echo "  - Sistema completo de alertas"
echo "  - Integraci√≥n entre m√≥dulos"
echo "  - Optimizaci√≥n de UI/UX"
echo ""
echo -e "${RED}‚ùå Elementos Pendientes:${NC}"
echo "  - Tests automatizados"
echo "  - Documentaci√≥n completa"
echo "  - Optimizaci√≥n de performance"
echo ""
echo -e "${BLUE}üéØ Pr√≥ximos Pasos:${NC}"
echo "  1. Completar integraci√≥n de m√≥dulos"
echo "  2. Implementar sistema completo de alertas"
echo "  3. Optimizar UI/UX"
echo "  4. Agregar tests"
echo "  5. Documentar sistema"
echo ""
echo "üöÄ Sistema listo para unificaci√≥n completa!"